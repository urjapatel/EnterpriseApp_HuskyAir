package com.ur.spring.finalex.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ur.spring.finalex.model.Reservation;
import com.ur.spring.finalex.repository.ReservationRepository;

@RestController
@RequestMapping("/api/reservations")
public class ApiController {
    
    private final ReservationRepository reservationRepository;
    private final ObjectMapper objectMapper;
    
    public ApiController(ReservationRepository reservationRepository, ObjectMapper objectMapper) {
        this.reservationRepository = reservationRepository;
        this.objectMapper = objectMapper;
    }
    
    @GetMapping
    public ResponseEntity<String> getAllReservations() throws JsonProcessingException {
        List<Reservation> reservations = reservationRepository.findAll();
        String json = objectMapper.writeValueAsString(reservations);
        return ResponseEntity.ok(json);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<String> getReservationById(@PathVariable String id) {
        Optional<Reservation> reservation = reservationRepository.findById(id);
        if (reservation.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        
        try {
            return ResponseEntity.ok(objectMapper.writeValueAsString(reservation.get()));
        } catch (JsonProcessingException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                               .body("Error processing reservation data");
        }
    }
    
    @PostMapping
    public ResponseEntity<String> createReservation(@RequestBody String reservationJson) throws JsonProcessingException {
        Reservation reservation = objectMapper.readValue(reservationJson, Reservation.class);
        Reservation saved = reservationRepository.save(reservation);
        return ResponseEntity.ok(objectMapper.writeValueAsString(saved));
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<String> updateReservation(@PathVariable String id, @RequestBody String reservationJson) {
        Optional<Reservation> existingOpt = reservationRepository.findById(id);
        if (!existingOpt.isPresent()) {
            return ResponseEntity.notFound().build();
        }

        try {
            Reservation existingReservation = existingOpt.get();
            Reservation updates = objectMapper.readValue(reservationJson, Reservation.class);
            
            // Update fields
            existingReservation.setFirstName(updates.getFirstName());
            existingReservation.setLastName(updates.getLastName());
            existingReservation.setNumberOfPassengers(updates.getNumberOfPassengers());
            existingReservation.setTravelClass(updates.getTravelClass());
            existingReservation.setPhoneNumber(updates.getPhoneNumber());
            existingReservation.setTime(updates.getTime());
            existingReservation.setDateOfDeparture(updates.getDateOfDeparture());
            
            Reservation updated = reservationRepository.save(existingReservation);
            return ResponseEntity.ok(objectMapper.writeValueAsString(updated));
        } catch (JsonProcessingException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid JSON format");
        }
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteReservation(@PathVariable String id) {
        if (!reservationRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        reservationRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}